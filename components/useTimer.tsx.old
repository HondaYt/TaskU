import React, { useState, useEffect, createContext, useContext } from 'react';

const useTimer = (startHour: number, startMinute: number, endHour: number, endMinute: number, setIsTimerZero: (isZero: boolean) => void) => {
    const calculateTimeLeft = (start: Date, end: Date) => {
        const now = new Date();
        if (now > end) {
            return 0;
        } else if (now < start) {
            return (start.getTime() - now.getTime()) / 1000;
        } else {
            return (end.getTime() - now.getTime()) / 1000;
        }
    };

    const now = new Date();
    const startTime = new Date(now);
    startTime.setHours(startHour, startMinute, 0, 0);
    const endTime = new Date(now);
    endTime.setHours(endHour, endMinute, 0, 0);

    // 現在時刻が開始時刻より前の場合、開始時刻から終了時刻までの時間を初期値とする
    const initialTime = now < startTime ? (endTime.getTime() - startTime.getTime()) / 1000 : calculateTimeLeft(startTime, endTime);

    const [time, setTime] = useState<number>(initialTime);
    const [width, setWidth] = useState<number>((time / ((endTime.getTime() - startTime.getTime()) / 1000)) * 100);

    useEffect(() => {
        const timeout = setTimeout(() => {
            const interval = setInterval(() => {
                const timeLeft = calculateTimeLeft(startTime, endTime);
                setTime(timeLeft);
                setWidth((timeLeft / ((endTime.getTime() - startTime.getTime()) / 1000)) * 100);
                if (timeLeft <= 0) {
                    clearInterval(interval);
                    setIsTimerZero(true);
                }
            }, 1000);
            return () => clearInterval(interval);
        }, now < startTime ? startTime.getTime() - now.getTime() : 0);

        return () => clearTimeout(timeout);
    }, [startHour, startMinute, endHour, endMinute, setIsTimerZero]);

    return { time, width };
};




export default useTimer;